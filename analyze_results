#!/usr/bin/python3
# Copyright 2021 Google LLC.
# SPDX-License-Identifier: Apache-2.00

import sys, json
import itertools
from datetime import timedelta

results = []

# mode = sys.argv[1]
# files = sys.argv[2:]
files = sys.argv[1:]

if len(files) == 0:
    results += json.load(sys.stdin)['results']
else:
    for file in files:
        with open(file) as f:
           results += json.load(f)["results"]

modes = sorted({r["parameters"]["mode"] for r in results})

def format_timespan(seconds):
    hours,remainder = divmod(seconds, 3600)
    minutes,seconds = divmod(remainder, 60)
    hour_str = f'{hours} hours, ' if hours > 0 else ''
    minute_str = f'{minutes} minutes, ' if hours > 0 or minutes > 0 else ''
    return hour_str + minute_str + f'{seconds:.2f} seconds'

def get_file(r):
    return r["parameters"]["file"]
def get_mode(r):
    return r["parameters"]["mode"]

def get_result_with_mode(rs, mode):
    matches = list(filter(lambda r: get_mode(r) == mode, rs))
    if len(matches) == 0:
        return None
    return matches[0]

def get_cores(r):
    return (r["user"] + r["system"]) / r["mean"]

def summarize(file, rs, md):

    mode_results = {mode: format_timespan(get_result_with_mode(rs, mode)["mean"]) for mode in modes}

    return f'| {file} | ' + ' | '.join([str(v) for v in mode_results.values()]) + ' |'

data = [
    (file, list(rs)) for file, rs in itertools.groupby(sorted(results, key=get_file), get_file)
]

# print(data)

print('')
print('| File | ' + ' | '.join([str(v) for v in modes]) + ' |')
print('|:-----|' + '|'.join(['----:' for v in modes]) +  '|')
print('\n'.join([summarize(file, rs, md=True) for file, rs in data]) + '\n')
